basePath: /v1alpha1
definitions:
  v1alpha2.Namespace:
    properties:
      name:
        type: string
    type: object
  v1alpha2.RequestError:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Peter Polacik
  description: API to use DataBuddy data storage system
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: DataBuddy
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: |-
        Retrieve a list of all namespaces in DataBuddy system.
        If RBAC is enabled, the list returned contains only namespaces
        visible to the authenticated user.
        Optional query parameter "prefix" can be provided to return
        only namespaces with the given prefix.
      parameters:
      - default: '""'
        description: Prefix for namespace names
        in: query
        name: prefix
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/v1alpha2.Namespace'
            type: array
      summary: List accessible namespaces
      tags:
      - namespace
  /{namespace}:
    delete:
      consumes:
      - application/json
      description: |-
        Delete provided namespace.
        This method also deletes all collections that are part of the namespace.
      parameters:
      - description: Name of the namespace
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha2.Namespace'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1alpha2.RequestError'
      tags:
      - namespace
    get:
      consumes:
      - application/json
      description: Retrieve detailed information about namespace by name.
      parameters:
      - description: Name of the namespace to retrieve
        in: path
        name: namespace
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha2.Namespace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1alpha2.RequestError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/v1alpha2.RequestError'
      summary: Get namespace by name
      tags:
      - namespace
    put:
      consumes:
      - application/json
      description: |-
        Modify namespace with "name" (path parameter) to match
        the provided namespace object. Create namespace if does not exist.
        The name provided in path and name in request body (if set) MUST
        be the same.
      parameters:
      - description: Name of the namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: The namespace object
        in: body
        name: spec
        required: true
        schema:
          $ref: '#/definitions/v1alpha2.Namespace'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha2.Namespace'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/v1alpha2.RequestError'
      summary: Set namespace
      tags:
      - namespace
swagger: "2.0"
