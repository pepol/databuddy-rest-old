basePath: /v1alpha2
definitions:
  v1alpha3.KVItem:
    properties:
      createIndex:
        type: string
      expiresAt:
        type: integer
      flags:
        type: integer
      key:
        type: string
      updateIndex:
        type: string
      value:
        description: Value is encoded using base64.
        items:
          type: integer
        type: array
    type: object
  v1alpha3.NamespaceSpec:
    properties:
      description:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
    type: object
  v1alpha3.NamespaceStatus:
    properties:
      createIndex:
        type: string
      deleteIndex:
        type: string
      description:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      name:
        type: string
      updateIndex:
        type: string
    type: object
  v1alpha3.RequestError:
    properties:
      error:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    name: Peter Polacik
  description: API to use DataBuddy data storage system
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: DataBuddy
  version: "1.0"
paths:
  /kv:
    get:
      consumes:
      - application/json
      description: List all keys.
      parameters:
      - default: ""
        description: Key prefix
        in: query
        name: prefix
        type: string
      - default: default
        description: Namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: List all keys
      tags:
      - kv
  /kv/{key}:
    delete:
      consumes:
      - application/json
      description: Delete provided key.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      - default: default
        description: Namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha3.KVItem'
        "404":
          description: Returned when either key or namespace doesn't exist
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
      summary: Delete key
      tags:
      - kv
    get:
      consumes:
      - application/json
      description: Get key value.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      - default: default
        description: Namespace
        in: query
        name: namespace
        type: string
      - default: false
        description: Return only value
        in: query
        name: raw
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha3.KVItem'
        "400":
          description: Returned when 'raw' parameter is not parseable as boolean
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
        "404":
          description: Returned when either key or namespace doesn't exist
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
      summary: Get key
      tags:
      - namespace
    put:
      consumes:
      - text/plain
      - application/octet-stream
      description: |-
        Store the provided value under key.
        If namespace doesn't exist, it gets created.
      parameters:
      - description: Key
        in: path
        name: key
        required: true
        type: string
      - default: default
        description: Namespace
        in: query
        name: namespace
        type: string
      - default: 0
        description: User-defined metadata
        in: query
        name: flags
        type: integer
      - default: 0
        description: Time-To-Live (in seconds), 0 means the item won't expire
        in: query
        name: ttl
        type: integer
      - description: Value to store
        in: body
        name: value
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: boolean
        "400":
          description: Returned when no value is provided
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
      summary: Put key
      tags:
      - kv
  /namespace:
    get:
      consumes:
      - application/json
      description: List all namespaces.
      parameters:
      - default: ""
        description: Namespace name prefix
        in: query
        name: prefix
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: List all namespaces
      tags:
      - namespace
  /namespace/{name}:
    delete:
      consumes:
      - application/json
      description: |-
        Mark given namespace as deleted.
        All the objects stored within the namespace are scheduled for
        deletion asynchronously. While the namespace is in the process
        of being deleted, GET-ing it will return the object with status
        attribute "DeleteIndex" set to index of the delete operation.
        Once all the contents of the namespace are deleted, GET on
        the namespace will return HTTP 404.
      parameters:
      - description: Namespace name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha3.NamespaceStatus'
        "404":
          description: Returned when namespace doesn't exist
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
      summary: Delete namespace
      tags:
      - namespace
    get:
      consumes:
      - application/json
      description: Get namespace by name.
      parameters:
      - description: Namespace name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha3.NamespaceStatus'
        "404":
          description: Returned when namespace doesn't exist
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
      summary: Get namespace
      tags:
      - namespace
    put:
      consumes:
      - application/json
      description: |-
        Create the namespace with given name and spec.
        Update fields of given namespace based on body if it already
        exists.
      parameters:
      - description: Namespace name
        in: path
        name: name
        required: true
        type: string
      - description: Namespace fields to update
        in: body
        name: spec
        required: true
        schema:
          $ref: '#/definitions/v1alpha3.NamespaceSpec'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/v1alpha3.NamespaceStatus'
        "400":
          description: Returned when 'spec' doesn't conform to model
          schema:
            $ref: '#/definitions/v1alpha3.RequestError'
      summary: Create/update namespace
      tags:
      - namespace
swagger: "2.0"
