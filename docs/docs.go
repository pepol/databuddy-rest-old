// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import "github.com/swaggo/swag"

const docTemplate_swagger = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Peter Polacik"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/item/{key}": {
            "get": {
                "description": "Get value stored at key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Get value stored at key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/kv.GetResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/kv.KvError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/kv.KvError"
                        }
                    }
                }
            },
            "put": {
                "description": "Store value for a key",
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Store value for a key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Value to store",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/kv.PutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/kv.KvError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/kv.KvError"
                        }
                    }
                }
            },
            "post": {
                "description": "Store value for a key",
                "consumes": [
                    "application/json",
                    "text/plain"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "kv"
                ],
                "summary": "Store value for a key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Item key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Value to store",
                        "name": "value",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/kv.PutResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/kv.KvError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/kv.KvError"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "Get status of service, including hostname and version",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "status"
                ],
                "summary": "Get status of service",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/status.StatusResponse"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/status.StatusResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "kv.GetResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "kv.KvError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                }
            }
        },
        "kv.PutResponse": {
            "type": "object",
            "properties": {
                "key": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "value": {}
            }
        },
        "status.StatusResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "hostname": {
                    "type": "string"
                },
                "running": {
                    "type": "boolean"
                },
                "version": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo_swagger holds exported Swagger Info so clients can modify it
var SwaggerInfo_swagger = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/v1alpha1",
	Schemes:          []string{},
	Title:            "DataBuddy",
	Description:      "API to use DataBuddy data storage system",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate_swagger,
}

func init() {
	swag.Register(SwaggerInfo_swagger.InstanceName(), SwaggerInfo_swagger)
}
